{"version":3,"sources":["App.jsx","serviceWorker.js","index.js"],"names":["App","_useState","useState","_useState2","Object","slicedToArray","showSlides","setShowSlides","_useState3","_useState4","showCode","setShowCode","split","react_default","a","createElement","className","dropdown_default","overlay","button_default","icon","shape","onClick","ghost","src","style","display","width","title","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mMA4DeA,SAvDH,WAAM,IAAAC,EACoBC,oBAAS,GAD7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACTK,EADSH,EAAA,GACGI,EADHJ,EAAA,GAAAK,EAEgBN,oBAAS,GAFzBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAETE,EAFSD,EAAA,GAECE,EAFDF,EAAA,GAGVG,EAAQN,GAAcI,EAE5B,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,QACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEM,KAAK,UACLC,MAAM,iBACNC,QAAS,kBAAMf,GAAeD,IAC9BiB,OAAQjB,KAGZO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CACEM,KAAK,OACLC,MAAM,iBACNC,QAAS,kBAAMX,GAAaD,IAC5Ba,OAAQb,OAMhBG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAInBH,EAAAC,EAAAC,cAAA,UACES,IAAI,4FACJC,MAAO,CACLC,SAAUpB,GAAc,OACxBqB,MAAOf,EAAQ,OAAS,SAE1BgB,MAAM,WAGRf,EAAAC,EAAAC,cAAA,UACES,IAAI,wBACJC,MAAO,CACLC,SAAUhB,GAAY,OACtBiB,MAAOf,EAAQ,OAAS,SAE1BgB,MAAM,YC1CMC,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCVNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SDwF3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC","file":"static/js/main.b45474c6.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport Button from 'antd/lib/button'\nimport Dropdown from 'antd/lib/dropdown'\nimport './App.css'\n\nconst App = () => {\n  const [showSlides, setShowSlides] = useState(true)\n  const [showCode, setShowCode] = useState(false)\n  const split = showSlides && showCode\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-actions\">\n        <Dropdown\n          overlay={(\n            <div className=\"App-actions-overlay\">\n              <div className=\"App-actions-button\">\n                <Button\n                  icon=\"desktop\"\n                  shape=\"circle-outline\"\n                  onClick={() => setShowSlides(!showSlides)}\n                  ghost={!showSlides}\n                />\n              </div>\n              <div className=\"App-actions-button\">\n                <Button\n                  icon=\"code\"\n                  shape=\"circle-outline\"\n                  onClick={() => setShowCode(!showCode)}\n                  ghost={!showCode}\n                />\n              </div>\n            </div>\n          )}\n        >\n          <div className=\"App-actions-hover\" />\n        </Dropdown>\n      </div>\n\n      <iframe\n        src=\"https://docs.google.com/presentation/d/1GJV5dI1KxTtY4tgXPgmWh-jlujqPvfI_2bLltTISnKw/embed\"\n        style={{\n          display: !showSlides && 'none',\n          width: split ? '50vw' : '100vw',\n        }}\n        title=\"Slides\"\n      />\n\n      <iframe\n        src=\"http://localhost:8080\"\n        style={{\n          display: !showCode && 'none',\n          width: split ? '50vw' : '100vw',\n        }}\n        title=\"Code\"\n      />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport 'antd/lib/button/style/css'\nimport 'antd/lib/dropdown/style/css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}